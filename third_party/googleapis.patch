diff --git a/google/cloud/kms/v1/resources.proto b/google/cloud/kms/v1/resources.proto
index 5029f3e03..12ebe8829 100644
--- a/google/cloud/kms/v1/resources.proto
+++ b/google/cloud/kms/v1/resources.proto
@@ -89,6 +89,13 @@ message CryptoKey {
     // [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey].
     ASYMMETRIC_DECRYPT = 6;
 
+    // [CryptoKeys][CryptoKey] with this purpose may be used with
+    // [RawEncrypt][KeyManagementService.RawEncrypt] and
+    // [RawDecrypt][KeyManagementService.RawDecrypt].
+    // This purpose is meant to be used for interoperable symmetric
+    // encryption and does not support automatic CryptoKey rotation.
+    RAW_ENCRYPT_DECRYPT = 7;
+
     // [CryptoKeys][google.cloud.kms.v1.CryptoKey] with this purpose may be used
     // with [MacSign][google.cloud.kms.v1.KeyManagementService.MacSign].
     MAC = 9;
@@ -336,6 +343,16 @@ message CryptoKeyVersion {
     // Creates symmetric encryption keys.
     GOOGLE_SYMMETRIC_ENCRYPTION = 1;
 
+    // AES+GCM (Galois Counter Mode).
+    AES_128_GCM = 41;
+    AES_256_GCM = 19;
+    // AES-CBC (Cipher Block Chaining Mode)
+    AES_128_CBC = 42;
+    AES_256_CBC = 43;
+    // AES-CTR (Counter Mode)
+    AES_128_CTR = 44;
+    AES_256_CTR = 45;
+
     // RSASSA-PSS 2048 bit key with a SHA256 digest.
     RSA_SIGN_PSS_2048_SHA256 = 2;
 
@@ -403,6 +420,15 @@ message CryptoKeyVersion {
     // HMAC-SHA256 signing with a 256 bit key.
     HMAC_SHA256 = 32;
 
+    // HMAC-SHA1 signing with a 160 bit key.
+    HMAC_SHA1 = 33;
+    // HMAC-SHA384 signing with a 384 bit key.
+    HMAC_SHA384 = 34;
+    // HMAC-SHA512 signing with a 512 bit key.
+    HMAC_SHA512 = 35;
+    // HMAC-SHA224 signing with a 224 bit key.
+    HMAC_SHA224 = 36;
+
     // Algorithm representing symmetric encryption by an external key manager.
     EXTERNAL_SYMMETRIC_ENCRYPTION = 18;
   }
diff --git a/google/cloud/kms/v1/service.proto b/google/cloud/kms/v1/service.proto
index 565678da3..46ff75a0d 100644
--- a/google/cloud/kms/v1/service.proto
+++ b/google/cloud/kms/v1/service.proto
@@ -317,6 +317,29 @@ service KeyManagementService {
     option (google.api.method_signature) = "name,ciphertext";
   }
 
+  // Encrypts data using portable cryptographic primitives. Most users should
+  // choose [Encrypt][] and [Decrypt][] rather than their raw counterparts.
+  // The [CryptoKey.purpose][] must be
+  // [RAW_ENCRYPT_DECRYPT][CryptoKey.CryptoKeyPurpose.RAW_ENCRYPT_DECRYPT].
+  rpc RawEncrypt(RawEncryptRequest) returns (RawEncryptResponse) {
+    option (google.api.http) = {
+      post: "/v1/{name=projects/*/locations/*/keyRings/*/cryptoKeys/*/"
+            "cryptoKeyVersions/*}:rawEncrypt"
+      body: "*"
+    };
+  }
+
+  // Decrypts data that was originally encrypted using a raw cryptographic
+  // mechanism. The [CryptoKey.purpose][] must be
+  // [RAW_ENCRYPT_DECRYPT][CryptoKey.CryptoKeyPurpose.RAW_ENCRYPT_DECRYPT].
+  rpc RawDecrypt(RawDecryptRequest) returns (RawDecryptResponse) {
+    option (google.api.http) = {
+      post: "/v1/{name=projects/*/locations/*/keyRings/*/cryptoKeys/*/"
+            "cryptoKeyVersions/*}:rawDecrypt"
+      body: "*"
+    };
+  }
+
   // Signs data using a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]
   // with [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
   // ASYMMETRIC_SIGN, producing a signature that can be verified with the public
@@ -1068,6 +1091,184 @@ message DecryptRequest {
       [(google.api.field_behavior) = OPTIONAL];
 }
 
+// Request message for [KeyManagementService.RawEncrypt][].
+message RawEncryptRequest {
+  // The resource name of the [CryptoKeyVersion][]
+  // to use for encryption.
+  string name = 1 [
+    (google.api.field_behavior) = REQUIRED
+  ];
+
+  // The data to encrypt. Must be no larger than 64KiB.
+  //
+  // The maximum size depends on the key version's
+  // [protection_level][CryptoKeyVersionTemplate.protection_level]. For
+  // [SOFTWARE][ProtectionLevel.SOFTWARE] keys, the plaintext must be no
+  // larger than 64KiB. For [HSM][ProtectionLevel.HSM] keys, the combined
+  // length of the plaintext and additional_authenticated_data fields must
+  // be no larger than 8KiB.
+  bytes plaintext = 2 [
+    (google.api.field_behavior) = REQUIRED
+  ];
+
+  // Optional data that, if specified, must also be provided during
+  // decryption through
+  // [RawDecryptRequest.additional_authenticated_data][].
+  //
+  // This field may only be used in conjunction with an
+  // [algorithm][CryptoKeyVersion.algorithm] that accepts additional
+  // authenticated data (for example, AES-GCM).
+  //
+  // The maximum size depends on the key version's
+  // [protection_level][CryptoKeyVersionTemplate.protection_level]. For
+  // [SOFTWARE][ProtectionLevel.SOFTWARE] keys, the plaintext must be no
+  // larger than 64KiB. For [HSM][ProtectionLevel.HSM] keys, the combined
+  // length of the plaintext and additional_authenticated_data fields must
+  // be no larger than 8KiB.
+  bytes additional_authenticated_data = 3 [
+    (google.api.field_behavior) = OPTIONAL
+  ];
+
+  // An optional CRC32C checksum of the [RawEncryptRequest.plaintext][]. If
+  // specified, [KeyManagementService][] will verify the integrity of the
+  // received plaintext using this checksum.
+  // [KeyManagementService][] will report an error if the checksum verification
+  // fails. If you receive a checksum error, your client should verify that
+  // CRC32C(plaintext) is equal to plaintext_crc32c, and if so, perform a
+  // limited number of retries. A persistent mismatch may indicate an issue in
+  // your computation of the CRC32C checksum.
+  // Note: This field is defined as int64 for reasons of compatibility across
+  // different languages. However, it is a non-negative integer, which will
+  // never exceed 2^32-1, and can be safely downconverted to uint32 in languages
+  // that support this type.
+  google.protobuf.Int64Value plaintext_crc32c = 4 [
+    (google.api.field_behavior) = OPTIONAL
+  ];
+
+  // An optional CRC32C checksum of the
+  // [RawEncryptRequest.additional_authenticated_data][]. If specified,
+  // [KeyManagementService][] will verify the integrity of the received
+  // additional_authenticated_data using this checksum.
+  // [KeyManagementService][] will report an error if the checksum verification
+  // fails. If you receive a checksum error, your client should verify that
+  // CRC32C(additional_authenticated_data) is equal to
+  // additional_authenticated_data_crc32c, and if so, perform
+  // a limited number of retries. A persistent mismatch may indicate an issue in
+  // your computation of the CRC32C checksum.
+  // Note: This field is defined as int64 for reasons of compatibility across
+  // different languages. However, it is a non-negative integer, which will
+  // never exceed 2^32-1, and can be safely downconverted to uint32 in languages
+  // that support this type.
+  google.protobuf.Int64Value additional_authenticated_data_crc32c = 5 [
+    (google.api.field_behavior) = OPTIONAL
+  ];
+
+  // Optional. A customer-supplied initialization vector that will be used for encryption.
+  // If it is not provided for AES-CBC and AES-CTR, one will be generated.
+  // It will be returned in [RawEncryptResponse.initialization_vector][].
+  bytes initialization_vector = 6 [(google.api.field_behavior) = OPTIONAL];
+
+  // Optional. An optional CRC32C checksum of the
+  // [RawEncryptRequest.initialization_vector][]. If specified,
+  // [KeyManagementService][] will verify the integrity of the received
+  // initialization_vector using this checksum.
+  // [KeyManagementService][] will report an error if the checksum verification
+  // fails. If you receive a checksum error, your client should verify that
+  // CRC32C(initialization_vector) is equal to
+  // initialization_vector_crc32c, and if so, perform
+  // a limited number of retries. A persistent mismatch may indicate an issue in
+  // your computation of the CRC32C checksum.
+  // Note: This field is defined as int64 for reasons of compatibility across
+  // different languages. However, it is a non-negative integer, which will
+  // never exceed 2^32-1, and can be safely downconverted to uint32 in languages
+  // that support this type.
+  google.protobuf.Int64Value initialization_vector_crc32c = 7 [(google.api.field_behavior) = OPTIONAL];
+}
+
+// Request message for [KeyManagementService.RawDecrypt][].
+message RawDecryptRequest {
+  // The resource name of the [CryptoKeyVersion][] to use for
+  // decryption.
+  string name = 1 [
+    (google.api.field_behavior) = REQUIRED
+  ];
+
+  // The encrypted data originally returned in
+  // [RawEncryptResponse.ciphertext][].
+  bytes ciphertext = 2 [
+    (google.api.field_behavior) = REQUIRED
+  ];
+
+  // Optional data that must match the data originally supplied in
+  // [RawEncryptRequest.additional_authenticated_data][].
+  bytes additional_authenticated_data = 3 [
+    (google.api.field_behavior) = OPTIONAL
+  ];
+
+  // The initialization vector (IV) used during encryption, which must
+  // match the data originally provided in
+  // [RawEncryptResponse.initialization_vector][].
+  bytes initialization_vector = 4 [
+    (google.api.field_behavior) = REQUIRED
+  ];
+
+  // The length of the authentication tag that is appended to the end of
+  // the ciphertext. If unspecified (0), the default value for the key's
+  // algorithm will be used (for AES-GCM, the default value is 16).
+  int32 tag_length = 5;
+
+  // An optional CRC32C checksum of the [RawDecryptRequest.ciphertext][]. If
+  // specified, [KeyManagementService][] will verify the integrity of the
+  // received ciphertext using this checksum.
+  // [KeyManagementService][] will report an error if the checksum verification
+  // fails. If you receive a checksum error, your client should verify that
+  // CRC32C(ciphertext) is equal to ciphertext_crc32c, and if so, perform a
+  // limited number of retries. A persistent mismatch may indicate an issue in
+  // your computation of the CRC32C checksum.
+  // Note: This field is defined as int64 for reasons of compatibility across
+  // different languages. However, it is a non-negative integer, which will
+  // never exceed 2^32-1, and can be safely downconverted to uint32 in languages
+  // that support this type.
+  google.protobuf.Int64Value ciphertext_crc32c = 6 [
+    (google.api.field_behavior) = OPTIONAL
+  ];
+
+  // An optional CRC32C checksum of the
+  // [RawDecryptRequest.additional_authenticated_data][]. If specified,
+  // [KeyManagementService][] will verify the integrity of the received
+  // additional_authenticated_data using this checksum.
+  // [KeyManagementService][] will report an error if the checksum verification
+  // fails. If you receive a checksum error, your client should verify that
+  // CRC32C(additional_authenticated_data) is equal to
+  // additional_authenticated_data_crc32c, and if so, perform
+  // a limited number of retries. A persistent mismatch may indicate an issue in
+  // your computation of the CRC32C checksum.
+  // Note: This field is defined as int64 for reasons of compatibility across
+  // different languages. However, it is a non-negative integer, which will
+  // never exceed 2^32-1, and can be safely downconverted to uint32 in languages
+  // that support this type.
+  google.protobuf.Int64Value additional_authenticated_data_crc32c = 7 [
+    (google.api.field_behavior) = OPTIONAL
+  ];
+
+  // An optional CRC32C checksum of the
+  // [RawDecryptRequest.initialization_vector][]. If specified,
+  // [KeyManagementService][] will verify the integrity of the received
+  // initialization_vector using this checksum.
+  // [KeyManagementService][] will report an error if the checksum verification
+  // fails. If you receive a checksum error, your client should verify that
+  // CRC32C(initialization_vector) is equal to initialization_vector_crc32c, and
+  // if so, perform a limited number of retries. A persistent mismatch may
+  // indicate an issue in your computation of the CRC32C checksum.
+  // Note: This field is defined as int64 for reasons of compatibility across
+  // different languages. However, it is a non-negative integer, which will
+  // never exceed 2^32-1, and can be safely downconverted to uint32 in languages
+  // that support this type.
+  google.protobuf.Int64Value initialization_vector_crc32c = 8 [
+    (google.api.field_behavior) = OPTIONAL
+  ];
+}
+
 // Request message for
 // [KeyManagementService.AsymmetricSign][google.cloud.kms.v1.KeyManagementService.AsymmetricSign].
 message AsymmetricSignRequest {
@@ -1400,6 +1601,143 @@ message DecryptResponse {
   ProtectionLevel protection_level = 4;
 }
 
+// Response message for [KeyManagementService.RawEncrypt][].
+message RawEncryptResponse {
+  // The encrypted data. In the case of AES-GCM, the authentication tag
+  // is the [tag_length][] bytes at the end of this field.
+  bytes ciphertext = 1;
+
+  // The initialization vector (IV) generated by the service during
+  // encryption. This value must be stored and provided in
+  // [RawDecryptRequest.initialization_vector][] at decryption time.
+  bytes initialization_vector = 2;
+
+  // The length of the authentication tag that is appended to
+  // the end of the ciphertext.
+  int32 tag_length = 3;
+
+  // Integrity verification field. A CRC32C checksum of the returned
+  // [RawEncryptResponse.ciphertext][]. An integrity check of ciphertext can be
+  // performed by computing the CRC32C checksum of ciphertext and comparing your
+  // results to this field. Discard the response in case of non-matching
+  // checksum values, and perform a limited number of retries. A persistent
+  // mismatch may indicate an issue in your computation of the CRC32C checksum.
+  // Note: This field is defined as int64 for reasons of compatibility across
+  // different languages. However, it is a non-negative integer, which will
+  // never exceed 2^32-1, and can be safely downconverted to uint32 in languages
+  // that support this type.
+  google.protobuf.Int64Value ciphertext_crc32c = 4;
+
+  // Integrity verification field. A CRC32C checksum of the returned
+  // [RawEncryptResponse.initialization_vector][]. An integrity check of
+  // initialization_vector can be performed by computing the CRC32C checksum of
+  // initialization_vector and comparing your results to this field. Discard the
+  // response in case of non-matching checksum values, and perform a limited
+  // number of retries. A persistent mismatch may indicate an issue in your
+  // computation of the CRC32C checksum. Note: This field is defined as int64
+  // for reasons of compatibility across different languages. However, it is a
+  // non-negative integer, which will never exceed 2^32-1, and can be safely
+  // downconverted to uint32 in languages that support this type.
+  google.protobuf.Int64Value initialization_vector_crc32c = 5;
+
+  // Integrity verification field. A flag indicating whether
+  // [RawEncryptRequest.plaintext_crc32c][] was received by
+  // [KeyManagementService][] and used for the integrity verification of the
+  // plaintext. A false value of this field indicates either that
+  // [RawEncryptRequest.plaintext_crc32c][] was left unset or that it was not
+  // delivered to [KeyManagementService][]. If you've set
+  // [RawEncryptRequest.plaintext_crc32c][] but this field is still false,
+  // discard the response and perform a limited number of retries.
+  bool verified_plaintext_crc32c = 6;
+
+  // Integrity verification field. A flag indicating whether
+  // [RawEncryptRequest.additional_authenticated_data_crc32c][] was received by
+  // [KeyManagementService][] and used for the integrity verification of
+  // additional_authenticated_data. A false value of this
+  // field indicates either that //
+  // [RawEncryptRequest.additional_authenticated_data_crc32c][] was left unset
+  // or that it was not delivered to [KeyManagementService][]. If you've set
+  // [RawEncryptRequest.additional_authenticated_data_crc32c][] but this field
+  // is still false, discard the response and perform a limited number of
+  // retries.
+  bool verified_additional_authenticated_data_crc32c = 7;
+
+  // Integrity verification field. A flag indicating whether
+  // [RawEncryptRequest.initialization_vector_crc32c][] was received by
+  // [KeyManagementService][] and used for the integrity verification of
+  // initialization_vector. A false value of this field indicates either that
+  // [RawEncryptRequest.initialization_vector_crc32c][] was left unset
+  // or that it was not delivered to [KeyManagementService][]. If you've set
+  // [RawEncryptRequest.initialization_vector_crc32c][] but this field
+  // is still false, discard the response and perform a limited number of
+  // retries.
+  bool verified_initialization_vector_crc32c = 10;
+
+  // The resource name of the [CryptoKeyVersion][] used in encryption. Check
+  // this field to verify that the intended resource was used for encryption.
+  string name = 8;
+
+  // The [ProtectionLevel][] of the [CryptoKeyVersion][] used in encryption.
+  ProtectionLevel protection_level = 9;
+}
+
+// Response message for [KeyManagementService.RawDecrypt][].
+message RawDecryptResponse {
+  // The decrypted data.
+  bytes plaintext = 1;
+
+  // Integrity verification field. A CRC32C checksum of the returned
+  // [RawDecryptResponse.plaintext][]. An integrity check of plaintext can be
+  // performed by computing the CRC32C checksum of plaintext and comparing your
+  // results to this field. Discard the response in case of non-matching
+  // checksum values, and perform a limited number of retries. A persistent
+  // mismatch may indicate an issue in your computation of the CRC32C checksum.
+  // Note: receiving this response message indicates that
+  // [KeyManagementService][] is able to successfully decrypt the
+  // [ciphertext][RawDecryptRequest.ciphertext].
+  // Note: This field is defined as int64 for reasons of compatibility across
+  // different languages. However, it is a non-negative integer, which will
+  // never exceed 2^32-1, and can be safely downconverted to uint32 in languages
+  // that support this type.
+  google.protobuf.Int64Value plaintext_crc32c = 2;
+
+  // The [ProtectionLevel][] of the [CryptoKeyVersion][] used in decryption.
+  ProtectionLevel protection_level = 3;
+
+  // Integrity verification field. A flag indicating whether
+  // [RawDecryptRequest.ciphertext_crc32c][] was received by
+  // [KeyManagementService][] and used for the integrity verification of the
+  // ciphertext. A false value of this field indicates either that
+  // [RawDecryptRequest.ciphertext_crc32c][] was left unset or that it was not
+  // delivered to [KeyManagementService][]. If you've set
+  // [RawDecryptRequest.ciphertext_crc32c][] but this field is still false,
+  // discard the response and perform a limited number of retries.
+  bool verified_ciphertext_crc32c = 4;
+
+  // Integrity verification field. A flag indicating whether
+  // [RawDecryptRequest.additional_authenticated_data_crc32c][] was received by
+  // [KeyManagementService][] and used for the integrity verification of
+  // additional_authenticated_data. A false value of this
+  // field indicates either that //
+  // [RawDecryptRequest.additional_authenticated_data_crc32c][] was left unset
+  // or that it was not delivered to [KeyManagementService][]. If you've set
+  // [RawDecryptRequest.additional_authenticated_data_crc32c][] but this field
+  // is still false, discard the response and perform a limited number of
+  // retries.
+  bool verified_additional_authenticated_data_crc32c = 5;
+
+  // Integrity verification field. A flag indicating whether
+  // [RawDecryptRequest.initialization_vector_crc32c][] was received by
+  // [KeyManagementService][] and used for the integrity verification of
+  // initialization_vector. A false value of this field indicates either that
+  // [RawDecryptRequest.initialization_vector_crc32c][] was left unset
+  // or that it was not delivered to [KeyManagementService][]. If you've set
+  // [RawDecryptRequest.initialization_vector_crc32c][] but this field
+  // is still false, discard the response and perform a limited number of
+  // retries.
+  bool verified_initialization_vector_crc32c = 6;
+}
+
 // Response message for
 // [KeyManagementService.AsymmetricSign][google.cloud.kms.v1.KeyManagementService.AsymmetricSign].
 message AsymmetricSignResponse {
